; THIS FILE WAS AUTOMATICALLY GENERATED, see at the end of cairo.sls 
(define-function* cairo_version () int)
(define-function* cairo_version_string () const-char*)
(define-function* cairo_create ((target cairo-surface-t*)) cairo-t*)
(define-function* cairo_reference ((cr cairo-t*)) cairo-t*)
(define-function* cairo_destroy ((cr cairo-t*)) void)
(define-function* cairo_get_reference_count ((cr cairo-t*)) unsigned-int)
(define-function* cairo_get_user_data ((cr cairo-t*) (key const-cairo-user-data-key-t*)) void*)
(define-function* cairo_set_user_data ((cr cairo-t*) (key const-cairo-user-data-key-t*) (user-data void*) (destroy cairo-destroy-func-t)) cairo-status-t)
(define-function* cairo_save ((cr cairo-t*)) void)
(define-function* cairo_restore ((cr cairo-t*)) void)
(define-function* cairo_push_group ((cr cairo-t*)) void)
(define-function* cairo_push_group_with_content ((cr cairo-t*) (content cairo-content-t)) void)
(define-function* cairo_pop_group ((cr cairo-t*)) cairo-pattern-t*)
(define-function* cairo_pop_group_to_source ((cr cairo-t*)) void)
(define-function* cairo_set_operator ((cr cairo-t*) (op cairo-operator-t)) void)
(define-function* cairo_set_source ((cr cairo-t*) (source cairo-pattern-t*)) void)
(define-function* cairo_set_source_rgb ((cr cairo-t*) (red double) (green double) (blue double)) void)
(define-function* cairo_set_source_rgba ((cr cairo-t*) (red double) (green double) (blue double) (alpha double)) void)
(define-function* cairo_set_source_surface ((cr cairo-t*) (surface cairo-surface-t*) (x double) (y double)) void)
(define-function* cairo_set_tolerance ((cr cairo-t*) (tolerance double)) void)
(define-function* cairo_set_antialias ((cr cairo-t*) (antialias cairo-antialias-t)) void)
(define-function* cairo_set_fill_rule ((cr cairo-t*) (fill-rule cairo-fill-rule-t)) void)
(define-function* cairo_set_line_width ((cr cairo-t*) (width double)) void)
(define-function* cairo_set_line_cap ((cr cairo-t*) (line-cap cairo-line-cap-t)) void)
(define-function* cairo_set_line_join ((cr cairo-t*) (line-join cairo-line-join-t)) void)
(define-function* cairo_set_dash ((cr cairo-t*) (dashes const-double*) (num-dashes int) (offset double)) void)
(define-function* cairo_set_miter_limit ((cr cairo-t*) (limit double)) void)
(define-function* cairo_translate ((cr cairo-t*) (tx double) (ty double)) void)
(define-function* cairo_scale ((cr cairo-t*) (sx double) (sy double)) void)
(define-function* cairo_rotate ((cr cairo-t*) (angle double)) void)
(define-function* cairo_transform ((cr cairo-t*) (matrix const-cairo-matrix-t*)) void)
(define-function* cairo_set_matrix ((cr cairo-t*) (matrix const-cairo-matrix-t*)) void)
(define-function* cairo_identity_matrix ((cr cairo-t*)) void)
(define-function* cairo_user_to_device ((cr cairo-t*) (x double*) (y double*)) void)
(define-function* cairo_user_to_device_distance ((cr cairo-t*) (dx double*) (dy double*)) void)
(define-function* cairo_device_to_user ((cr cairo-t*) (x double*) (y double*)) void)
(define-function* cairo_device_to_user_distance ((cr cairo-t*) (dx double*) (dy double*)) void)
(define-function* cairo_new_path ((cr cairo-t*)) void)
(define-function* cairo_move_to ((cr cairo-t*) (x double) (y double)) void)
(define-function* cairo_new_sub_path ((cr cairo-t*)) void)
(define-function* cairo_line_to ((cr cairo-t*) (x double) (y double)) void)
(define-function* cairo_curve_to ((cr cairo-t*) (x1 double) (y1 double) (x2 double) (y2 double) (x3 double) (y3 double)) void)
(define-function* cairo_arc ((cr cairo-t*) (xc double) (yc double) (radius double) (angle1 double) (angle2 double)) void)
(define-function* cairo_arc_negative ((cr cairo-t*) (xc double) (yc double) (radius double) (angle1 double) (angle2 double)) void)
(define-function* cairo_arc_to ((cr cairo-t*) (x1 double) (y1 double) (x2 double) (y2 double) (radius double)) void)
(define-function* cairo_rel_move_to ((cr cairo-t*) (dx double) (dy double)) void)
(define-function* cairo_rel_line_to ((cr cairo-t*) (dx double) (dy double)) void)
(define-function* cairo_rel_curve_to ((cr cairo-t*) (dx1 double) (dy1 double) (dx2 double) (dy2 double) (dx3 double) (dy3 double)) void)
(define-function* cairo_rectangle ((cr cairo-t*) (x double) (y double) (width double) (height double)) void)
(define-function* cairo_stroke_to_path ((cr cairo-t*)) void)
(define-function* cairo_close_path ((cr cairo-t*)) void)
(define-function* cairo_path_extents ((cr cairo-t*) (x1 double*) (y1 double*) (x2 double*) (y2 double*)) void)
(define-function* cairo_paint ((cr cairo-t*)) void)
(define-function* cairo_paint_with_alpha ((cr cairo-t*) (alpha double)) void)
(define-function* cairo_mask ((cr cairo-t*) (pattern cairo-pattern-t*)) void)
(define-function* cairo_mask_surface ((cr cairo-t*) (surface cairo-surface-t*) (surface-x double) (surface-y double)) void)
(define-function* cairo_stroke ((cr cairo-t*)) void)
(define-function* cairo_stroke_preserve ((cr cairo-t*)) void)
(define-function* cairo_fill ((cr cairo-t*)) void)
(define-function* cairo_fill_preserve ((cr cairo-t*)) void)
(define-function* cairo_copy_page ((cr cairo-t*)) void)
(define-function* cairo_show_page ((cr cairo-t*)) void)
(define-function* cairo_in_stroke ((cr cairo-t*) (x double) (y double)) cairo-bool-t)
(define-function* cairo_in_fill ((cr cairo-t*) (x double) (y double)) cairo-bool-t)
(define-function* cairo_in_clip ((cr cairo-t*) (x double) (y double)) cairo-bool-t)
(define-function* cairo_stroke_extents ((cr cairo-t*) (x1 double*) (y1 double*) (x2 double*) (y2 double*)) void)
(define-function* cairo_fill_extents ((cr cairo-t*) (x1 double*) (y1 double*) (x2 double*) (y2 double*)) void)
(define-function* cairo_reset_clip ((cr cairo-t*)) void)
(define-function* cairo_clip ((cr cairo-t*)) void)
(define-function* cairo_clip_preserve ((cr cairo-t*)) void)
(define-function* cairo_clip_extents ((cr cairo-t*) (x1 double*) (y1 double*) (x2 double*) (y2 double*)) void)
(define-function* cairo_copy_clip_rectangle_list ((cr cairo-t*)) cairo-rectangle-list-t*)
(define-function* cairo_rectangle_list_destroy ((rectangle-list cairo-rectangle-list-t*)) void)
(define-function* cairo_glyph_allocate ((num-glyphs int)) cairo-glyph-t*)
(define-function* cairo_glyph_free ((glyphs cairo-glyph-t*)) void)
(define-function* cairo_text_cluster_allocate ((num-clusters int)) cairo-text-cluster-t*)
(define-function* cairo_text_cluster_free ((clusters cairo-text-cluster-t*)) void)
(define-function* cairo_font_options_create () cairo-font-options-t*)
(define-function* cairo_font_options_copy ((original const-cairo-font-options-t*)) cairo-font-options-t*)
(define-function* cairo_font_options_destroy ((options cairo-font-options-t*)) void)
(define-function* cairo_font_options_status ((options cairo-font-options-t*)) cairo-status-t)
(define-function* cairo_font_options_merge ((options cairo-font-options-t*) (other const-cairo-font-options-t*)) void)
(define-function* cairo_font_options_equal ((options const-cairo-font-options-t*) (other const-cairo-font-options-t*)) cairo-bool-t)
(define-function* cairo_font_options_hash ((options const-cairo-font-options-t*)) unsigned-long)
(define-function* cairo_font_options_set_antialias ((options cairo-font-options-t*) (antialias cairo-antialias-t)) void)
(define-function* cairo_font_options_get_antialias ((options const-cairo-font-options-t*)) cairo-antialias-t)
(define-function* cairo_font_options_set_subpixel_order ((options cairo-font-options-t*) (subpixel-order cairo-subpixel-order-t)) void)
(define-function* cairo_font_options_get_subpixel_order ((options const-cairo-font-options-t*)) cairo-subpixel-order-t)
(define-function* cairo_font_options_set_hint_style ((options cairo-font-options-t*) (hint-style cairo-hint-style-t)) void)
(define-function* cairo_font_options_get_hint_style ((options const-cairo-font-options-t*)) cairo-hint-style-t)
(define-function* cairo_font_options_set_hint_metrics ((options cairo-font-options-t*) (hint-metrics cairo-hint-metrics-t)) void)
(define-function* cairo_font_options_get_hint_metrics ((options const-cairo-font-options-t*)) cairo-hint-metrics-t)
(define-function* cairo_select_font_face ((cr cairo-t*) (family const-char*) (slant cairo-font-slant-t) (weight cairo-font-weight-t)) void)
(define-function* cairo_set_font_size ((cr cairo-t*) (size double)) void)
(define-function* cairo_set_font_matrix ((cr cairo-t*) (matrix const-cairo-matrix-t*)) void)
(define-function* cairo_get_font_matrix ((cr cairo-t*) (matrix cairo-matrix-t*)) void)
(define-function* cairo_set_font_options ((cr cairo-t*) (options const-cairo-font-options-t*)) void)
(define-function* cairo_get_font_options ((cr cairo-t*) (options cairo-font-options-t*)) void)
(define-function* cairo_set_font_face ((cr cairo-t*) (font-face cairo-font-face-t*)) void)
(define-function* cairo_get_font_face ((cr cairo-t*)) cairo-font-face-t*)
(define-function* cairo_set_scaled_font ((cr cairo-t*) (scaled-font const-cairo-scaled-font-t*)) void)
(define-function* cairo_get_scaled_font ((cr cairo-t*)) cairo-scaled-font-t*)
(define-function* cairo_show_text ((cr cairo-t*) (utf8 const-char*)) void)
(define-function* cairo_show_glyphs ((cr cairo-t*) (glyphs const-cairo-glyph-t*) (num-glyphs int)) void)
(define-function* cairo_show_text_glyphs ((cr cairo-t*) (utf8 const-char*) (utf8-len int) (glyphs const-cairo-glyph-t*) (num-glyphs int) (clusters const-cairo-text-cluster-t*) (num-clusters int) (cluster-flags cairo-text-cluster-flags-t)) void)
(define-function* cairo_text_path ((cr cairo-t*) (utf8 const-char*)) void)
(define-function* cairo_glyph_path ((cr cairo-t*) (glyphs const-cairo-glyph-t*) (num-glyphs int)) void)
(define-function* cairo_text_extents ((cr cairo-t*) (utf8 const-char*) (extents cairo-text-extents-t*)) void)
(define-function* cairo_glyph_extents ((cr cairo-t*) (glyphs const-cairo-glyph-t*) (num-glyphs int) (extents cairo-text-extents-t*)) void)
(define-function* cairo_font_extents ((cr cairo-t*) (extents cairo-font-extents-t*)) void)
(define-function* cairo_font_face_reference ((font-face cairo-font-face-t*)) cairo-font-face-t*)
(define-function* cairo_font_face_destroy ((font-face cairo-font-face-t*)) void)
(define-function* cairo_font_face_get_reference_count ((font-face cairo-font-face-t*)) unsigned-int)
(define-function* cairo_font_face_status ((font-face cairo-font-face-t*)) cairo-status-t)
(define-function* cairo_font_face_get_type ((font-face cairo-font-face-t*)) cairo-font-type-t)
(define-function* cairo_font_face_get_user_data ((font-face cairo-font-face-t*) (key const-cairo-user-data-key-t*)) void*)
(define-function* cairo_font_face_set_user_data ((font-face cairo-font-face-t*) (key const-cairo-user-data-key-t*) (user-data void*) (destroy cairo-destroy-func-t)) cairo-status-t)
(define-function* cairo_scaled_font_create ((font-face cairo-font-face-t*) (font-matrix const-cairo-matrix-t*) (ctm const-cairo-matrix-t*) (options const-cairo-font-options-t*)) cairo-scaled-font-t*)
(define-function* cairo_scaled_font_reference ((scaled-font cairo-scaled-font-t*)) cairo-scaled-font-t*)
(define-function* cairo_scaled_font_destroy ((scaled-font cairo-scaled-font-t*)) void)
(define-function* cairo_scaled_font_get_reference_count ((scaled-font cairo-scaled-font-t*)) unsigned-int)
(define-function* cairo_scaled_font_status ((scaled-font cairo-scaled-font-t*)) cairo-status-t)
(define-function* cairo_scaled_font_get_type ((scaled-font cairo-scaled-font-t*)) cairo-font-type-t)
(define-function* cairo_scaled_font_get_user_data ((scaled-font cairo-scaled-font-t*) (key const-cairo-user-data-key-t*)) void*)
(define-function* cairo_scaled_font_set_user_data ((scaled-font cairo-scaled-font-t*) (key const-cairo-user-data-key-t*) (user-data void*) (destroy cairo-destroy-func-t)) cairo-status-t)
(define-function* cairo_scaled_font_extents ((scaled-font cairo-scaled-font-t*) (extents cairo-font-extents-t*)) void)
(define-function* cairo_scaled_font_text_extents ((scaled-font cairo-scaled-font-t*) (utf8 const-char*) (extents cairo-text-extents-t*)) void)
(define-function* cairo_scaled_font_glyph_extents ((scaled-font cairo-scaled-font-t*) (glyphs const-cairo-glyph-t*) (num-glyphs int) (extents cairo-text-extents-t*)) void)
(define-function* cairo_scaled_font_text_to_glyphs ((scaled-font cairo-scaled-font-t*) (x double) (y double) (utf8 const-char*) (utf8-len int) (*glyphs cairo-glyph-t*) (num-glyphs int*) (*clusters cairo-text-cluster-t*) (num-clusters int*) (cluster-flags cairo-text-cluster-flags-t*)) cairo-status-t)
(define-function* cairo_scaled_font_get_font_face ((scaled-font cairo-scaled-font-t*)) cairo-font-face-t*)
(define-function* cairo_scaled_font_get_font_matrix ((scaled-font cairo-scaled-font-t*) (font-matrix cairo-matrix-t*)) void)
(define-function* cairo_scaled_font_get_ctm ((scaled-font cairo-scaled-font-t*) (ctm cairo-matrix-t*)) void)
(define-function* cairo_scaled_font_get_scale_matrix ((scaled-font cairo-scaled-font-t*) (scale-matrix cairo-matrix-t*)) void)
(define-function* cairo_scaled_font_get_font_options ((scaled-font cairo-scaled-font-t*) (options cairo-font-options-t*)) void)
(define-function* cairo_toy_font_face_create ((family const-char*) (slant cairo-font-slant-t) (weight cairo-font-weight-t)) cairo-font-face-t*)
(define-function* cairo_toy_font_face_get_family ((font-face cairo-font-face-t*)) const-char*)
(define-function* cairo_toy_font_face_get_slant ((font-face cairo-font-face-t*)) cairo-font-slant-t)
(define-function* cairo_toy_font_face_get_weight ((font-face cairo-font-face-t*)) cairo-font-weight-t)
(define-function* cairo_user_font_face_create () cairo-font-face-t*)
(define-function* cairo_user_font_face_set_init_func ((font-face cairo-font-face-t*) (init-func cairo-user-scaled-font-init-func-t*)) void)
(define-function* cairo_user_font_face_set_render_glyph_func ((font-face cairo-font-face-t*) (render-glyph-func cairo-user-scaled-font-render-glyph-func-t)) void)
(define-function* cairo_user_font_face_set_text_to_glyphs_func ((font-face cairo-font-face-t*) (text-to-glyphs-func cairo-user-scaled-font-text-to-glyphs-func-t)) void)
(define-function* cairo_user_font_face_set_unicode_to_glyph_func ((font-face cairo-font-face-t*) (unicode-to-glyph-func cairo-user-scaled-font-unicode-to-glyph-func-t)) void)
(define-function* cairo_user_font_face_get_init_func ((font-face cairo-font-face-t*)) cairo-user-scaled-font-init-func-t)
(define-function* cairo_user_font_face_get_render_glyph_func ((font-face cairo-font-face-t*)) cairo-user-scaled-font-render-glyph-func-t)
(define-function* cairo_user_font_face_get_text_to_glyphs_func ((font-face cairo-font-face-t*)) cairo-user-scaled-font-text-to-glyphs-func-t)
(define-function* cairo_user_font_face_get_unicode_to_glyph_func ((font-face cairo-font-face-t*)) cairo-user-scaled-font-unicode-to-glyph-func-t)
(define-function* cairo_get_operator ((cr cairo-t*)) cairo-operator-t)
(define-function* cairo_get_source ((cr cairo-t*)) cairo-pattern-t*)
(define-function* cairo_get_tolerance ((cr cairo-t*)) double)
(define-function* cairo_get_antialias ((cr cairo-t*)) cairo-antialias-t)
(define-function* cairo_has_current_point ((cr cairo-t*)) cairo-bool-t)
(define-function* cairo_get_current_point ((cr cairo-t*) (x double*) (y double*)) void)
(define-function* cairo_get_fill_rule ((cr cairo-t*)) cairo-fill-rule-t)
(define-function* cairo_get_line_width ((cr cairo-t*)) double)
(define-function* cairo_get_line_cap ((cr cairo-t*)) cairo-line-cap-t)
(define-function* cairo_get_line_join ((cr cairo-t*)) cairo-line-join-t)
(define-function* cairo_get_miter_limit ((cr cairo-t*)) double)
(define-function* cairo_get_dash_count ((cr cairo-t*)) int)
(define-function* cairo_get_dash ((cr cairo-t*) (dashes double*) (offset double*)) void)
(define-function* cairo_get_matrix ((cr cairo-t*) (matrix cairo-matrix-t*)) void)
(define-function* cairo_get_target ((cr cairo-t*)) cairo-surface-t*)
(define-function* cairo_get_group_target ((cr cairo-t*)) cairo-surface-t*)
(define-function* cairo_copy_path ((cr cairo-t*)) cairo-path-t*)
(define-function* cairo_copy_path_flat ((cr cairo-t*)) cairo-path-t*)
(define-function* cairo_append_path ((cr cairo-t*) (path const-cairo-path-t*)) void)
(define-function* cairo_path_destroy ((path cairo-path-t*)) void)
(define-function* cairo_status ((cr cairo-t*)) cairo-status-t)
(define-function* cairo_status_to_string ((status cairo-status-t)) const-char*)
(define-function* cairo_device_reference ((device cairo-device-t*)) cairo-device-t*)
(define-function* cairo_device_get_type ((device cairo-device-t*)) cairo-device-type-t)
(define-function* cairo_device_status ((device cairo-device-t*)) cairo-status-t)
(define-function* cairo_device_acquire ((device cairo-device-t*)) cairo-status-t)
(define-function* cairo_device_release ((device cairo-device-t*)) void)
(define-function* cairo_device_flush ((device cairo-device-t*)) void)
(define-function* cairo_device_finish ((device cairo-device-t*)) void)
(define-function* cairo_device_destroy ((device cairo-device-t*)) void)
(define-function* cairo_device_get_reference_count ((device cairo-device-t*)) unsigned-int)
(define-function* cairo_device_get_user_data ((device cairo-device-t*) (key const-cairo-user-data-key-t*)) void*)
(define-function* cairo_device_set_user_data ((device cairo-device-t*) (key const-cairo-user-data-key-t*) (user-data void*) (destroy cairo-destroy-func-t)) cairo-status-t)
(define-function* cairo_surface_create_similar ((other cairo-surface-t*) (content cairo-content-t) (width int) (height int)) cairo-surface-t*)
(define-function* cairo_surface_create_similar_image ((other cairo-surface-t*) (format cairo-format-t) (width int) (height int)) cairo-surface-t*)
(define-function* cairo_surface_map_to_image ((surface cairo-surface-t*) (extents const-cairo-rectangle-int-t*)) cairo-surface-t*)
(define-function* cairo_surface_unmap_image ((surface cairo-surface-t*) (image cairo-surface-t*)) void)
(define-function* cairo_surface_create_for_rectangle ((target cairo-surface-t*) (x double) (y double) (width double) (height double)) cairo-surface-t*)
(define-function* cairo_surface_create_observer ((target cairo-surface-t*) (mode cairo-surface-observer-mode-t)) cairo-surface-t*)
(define-function* cairo_surface_observer_add_paint_callback ((abstract-surface cairo-surface-t*) (func cairo-surface-observer-callback-t) (data void*)) cairo-status-t)
(define-function* cairo_surface_observer_add_mask_callback ((abstract-surface cairo-surface-t*) (func cairo-surface-observer-callback-t) (data void*)) cairo-status-t)
(define-function* cairo_surface_observer_add_fill_callback ((abstract-surface cairo-surface-t*) (func cairo-surface-observer-callback-t) (data void*)) cairo-status-t)
(define-function* cairo_surface_observer_add_stroke_callback ((abstract-surface cairo-surface-t*) (func cairo-surface-observer-callback-t) (data void*)) cairo-status-t)
(define-function* cairo_surface_observer_add_glyphs_callback ((abstract-surface cairo-surface-t*) (func cairo-surface-observer-callback-t) (data void*)) cairo-status-t)
(define-function* cairo_surface_observer_add_flush_callback ((abstract-surface cairo-surface-t*) (func cairo-surface-observer-callback-t) (data void*)) cairo-status-t)
(define-function* cairo_surface_observer_add_finish_callback ((abstract-surface cairo-surface-t*) (func cairo-surface-observer-callback-t) (data void*)) cairo-status-t)
(define-function* cairo_surface_observer_print ((surface cairo-surface-t*) (write-func cairo-write-func-t) (closure void*)) cairo-status-t)
(define-function* cairo_surface_observer_elapsed ((surface cairo-surface-t*)) double)
(define-function* cairo_device_observer_print ((device cairo-device-t*) (write-func cairo-write-func-t) (closure void*)) cairo-status-t)
(define-function* cairo_device_observer_elapsed ((device cairo-device-t*)) double)
(define-function* cairo_device_observer_paint_elapsed ((device cairo-device-t*)) double)
(define-function* cairo_device_observer_mask_elapsed ((device cairo-device-t*)) double)
(define-function* cairo_device_observer_fill_elapsed ((device cairo-device-t*)) double)
(define-function* cairo_device_observer_stroke_elapsed ((device cairo-device-t*)) double)
(define-function* cairo_device_observer_glyphs_elapsed ((device cairo-device-t*)) double)
(define-function* cairo_surface_reference ((surface cairo-surface-t*)) cairo-surface-t*)
(define-function* cairo_surface_finish ((surface cairo-surface-t*)) void)
(define-function* cairo_surface_destroy ((surface cairo-surface-t*)) void)
(define-function* cairo_surface_get_device ((surface cairo-surface-t*)) cairo-device-t*)
(define-function* cairo_surface_get_reference_count ((surface cairo-surface-t*)) unsigned-int)
(define-function* cairo_surface_status ((surface cairo-surface-t*)) cairo-status-t)
(define-function* cairo_surface_get_type ((surface cairo-surface-t*)) cairo-surface-type-t)
(define-function* cairo_surface_get_content ((surface cairo-surface-t*)) cairo-content-t)
(define-function* cairo_surface_write_to_png ((surface cairo-surface-t*) (filename const-char*)) cairo-status-t)
(define-function* cairo_surface_write_to_png_stream ((surface cairo-surface-t*) (write-func cairo-write-func-t) (closure void*)) cairo-status-t)
(define-function* cairo_surface_get_user_data ((surface cairo-surface-t*) (key const-cairo-user-data-key-t*)) void*)
(define-function* cairo_surface_set_user_data ((surface cairo-surface-t*) (key const-cairo-user-data-key-t*) (user-data void*) (destroy cairo-destroy-func-t)) cairo-status-t)
(define-function* cairo_surface_get_mime_data ((surface cairo-surface-t*) (mime-type const-char*) (*data const-unsigned-char*) (length unsigned-long*)) void)
(define-function* cairo_surface_set_mime_data ((surface cairo-surface-t*) (mime-type const-char*) (data const-unsigned-char*) (length unsigned-long) (destroy cairo-destroy-func-t) (closure void*)) cairo-status-t)
(define-function* cairo_surface_supports_mime_type ((surface cairo-surface-t*) (mime-type const-char*)) cairo-bool-t)
(define-function* cairo_surface_get_font_options ((surface cairo-surface-t*) (options cairo-font-options-t*)) void)
(define-function* cairo_surface_flush ((surface cairo-surface-t*)) void)
(define-function* cairo_surface_mark_dirty ((surface cairo-surface-t*)) void)
(define-function* cairo_surface_mark_dirty_rectangle ((surface cairo-surface-t*) (x int) (y int) (width int) (height int)) void)
(define-function* cairo_surface_set_device_scale ((surface cairo-surface-t*) (x-scale double) (y-scale double)) void)
(define-function* cairo_surface_get_device_scale ((surface cairo-surface-t*) (x-scale double*) (y-scale double*)) void)
(define-function* cairo_surface_set_device_offset ((surface cairo-surface-t*) (x-offset double) (y-offset double)) void)
(define-function* cairo_surface_get_device_offset ((surface cairo-surface-t*) (x-offset double*) (y-offset double*)) void)
(define-function* cairo_surface_set_fallback_resolution ((surface cairo-surface-t*) (x-pixels-per-inch double) (y-pixels-per-inch double)) void)
(define-function* cairo_surface_get_fallback_resolution ((surface cairo-surface-t*) (x-pixels-per-inch double*) (y-pixels-per-inch double*)) void)
(define-function* cairo_surface_copy_page ((surface cairo-surface-t*)) void)
(define-function* cairo_surface_show_page ((surface cairo-surface-t*)) void)
(define-function* cairo_surface_has_show_text_glyphs ((surface cairo-surface-t*)) cairo-bool-t)
(define-function* cairo_image_surface_create ((format cairo-format-t) (width int) (height int)) cairo-surface-t*)
(define-function* cairo_format_stride_for_width ((format cairo-format-t) (width int)) int)
(define-function* cairo_image_surface_create_for_data ((data unsigned-char*) (format cairo-format-t) (width int) (height int) (stride int)) cairo-surface-t*)
(define-function* cairo_image_surface_get_data ((surface cairo-surface-t*)) unsigned-char*)
(define-function* cairo_image_surface_get_format ((surface cairo-surface-t*)) cairo-format-t)
(define-function* cairo_image_surface_get_width ((surface cairo-surface-t*)) int)
(define-function* cairo_image_surface_get_height ((surface cairo-surface-t*)) int)
(define-function* cairo_image_surface_get_stride ((surface cairo-surface-t*)) int)
(define-function* cairo_image_surface_create_from_png ((filename const-char*)) cairo-surface-t*)
(define-function* cairo_image_surface_create_from_png_stream ((read-func cairo-read-func-t) (closure void*)) cairo-surface-t*)
(define-function* cairo_recording_surface_create ((content cairo-content-t) (extents const-cairo-rectangle-t*)) cairo-surface-t*)
(define-function* cairo_recording_surface_ink_extents ((surface cairo-surface-t*) (x0 double*) (y0 double*) (width double*) (height double*)) void)
(define-function* cairo_recording_surface_get_extents ((surface cairo-surface-t*) (extents cairo-rectangle-t*)) cairo-bool-t)
(define-function* cairo_pattern_create_raster_source ((user-data void*) (content cairo-content-t) (width int) (height int)) cairo-pattern-t*)
(define-function* cairo_raster_source_pattern_set_callback_data ((pattern cairo-pattern-t*) (data void*)) void)
(define-function* cairo_raster_source_pattern_get_callback_data ((pattern cairo-pattern-t*)) void*)
(define-function* cairo_raster_source_pattern_set_acquire ((pattern cairo-pattern-t*) (acquire cairo-raster-source-acquire-func-t) (release cairo-raster-source-release-func-t)) void)
(define-function* cairo_raster_source_pattern_get_acquire ((pattern cairo-pattern-t*) (acquire cairo-raster-source-acquire-func-t*) (release cairo-raster-source-release-func-t*)) void)
(define-function* cairo_raster_source_pattern_set_snapshot ((pattern cairo-pattern-t*) (snapshot cairo-raster-source-snapshot-func-t)) void)
(define-function* cairo_raster_source_pattern_get_snapshot ((pattern cairo-pattern-t*)) cairo-raster-source-snapshot-func-t)
(define-function* cairo_raster_source_pattern_set_copy ((pattern cairo-pattern-t*) (copy cairo-raster-source-copy-func-t)) void)
(define-function* cairo_raster_source_pattern_get_copy ((pattern cairo-pattern-t*)) cairo-raster-source-copy-func-t)
(define-function* cairo_raster_source_pattern_set_finish ((pattern cairo-pattern-t*) (finish cairo-raster-source-finish-func-t)) void)
(define-function* cairo_raster_source_pattern_get_finish ((pattern cairo-pattern-t*)) cairo-raster-source-finish-func-t)
(define-function* cairo_pattern_create_rgb ((red double) (green double) (blue double)) cairo-pattern-t*)
(define-function* cairo_pattern_create_rgba ((red double) (green double) (blue double) (alpha double)) cairo-pattern-t*)
(define-function* cairo_pattern_create_for_surface ((surface cairo-surface-t*)) cairo-pattern-t*)
(define-function* cairo_pattern_create_linear ((x0 double) (y0 double) (x1 double) (y1 double)) cairo-pattern-t*)
(define-function* cairo_pattern_create_radial ((cx0 double) (cy0 double) (radius0 double) (cx1 double) (cy1 double) (radius1 double)) cairo-pattern-t*)
(define-function* cairo_pattern_create_mesh () cairo-pattern-t*)
(define-function* cairo_pattern_reference ((pattern cairo-pattern-t*)) cairo-pattern-t*)
(define-function* cairo_pattern_destroy ((pattern cairo-pattern-t*)) void)
(define-function* cairo_pattern_get_reference_count ((pattern cairo-pattern-t*)) unsigned-int)
(define-function* cairo_pattern_status ((pattern cairo-pattern-t*)) cairo-status-t)
(define-function* cairo_pattern_get_user_data ((pattern cairo-pattern-t*) (key const-cairo-user-data-key-t*)) void*)
(define-function* cairo_pattern_set_user_data ((pattern cairo-pattern-t*) (key const-cairo-user-data-key-t*) (user-data void*) (destroy cairo-destroy-func-t)) cairo-status-t)
(define-function* cairo_pattern_get_type ((pattern cairo-pattern-t*)) cairo-pattern-type-t)
(define-function* cairo_pattern_add_color_stop_rgb ((pattern cairo-pattern-t*) (offset double) (red double) (green double) (blue double)) void)
(define-function* cairo_pattern_add_color_stop_rgba ((pattern cairo-pattern-t*) (offset double) (red double) (green double) (blue double) (alpha double)) void)
(define-function* cairo_mesh_pattern_begin_patch ((pattern cairo-pattern-t*)) void)
(define-function* cairo_mesh_pattern_end_patch ((pattern cairo-pattern-t*)) void)
(define-function* cairo_mesh_pattern_curve_to ((pattern cairo-pattern-t*) (x1 double) (y1 double) (x2 double) (y2 double) (x3 double) (y3 double)) void)
(define-function* cairo_mesh_pattern_line_to ((pattern cairo-pattern-t*) (x double) (y double)) void)
(define-function* cairo_mesh_pattern_move_to ((pattern cairo-pattern-t*) (x double) (y double)) void)
(define-function* cairo_mesh_pattern_set_control_point ((pattern cairo-pattern-t*) (point-num unsigned-int) (x double) (y double)) void)
(define-function* cairo_mesh_pattern_set_corner_color_rgb ((pattern cairo-pattern-t*) (corner-num unsigned-int) (red double) (green double) (blue double)) void)
(define-function* cairo_mesh_pattern_set_corner_color_rgba ((pattern cairo-pattern-t*) (corner-num unsigned-int) (red double) (green double) (blue double) (alpha double)) void)
(define-function* cairo_pattern_set_matrix ((pattern cairo-pattern-t*) (matrix const-cairo-matrix-t*)) void)
(define-function* cairo_pattern_get_matrix ((pattern cairo-pattern-t*) (matrix cairo-matrix-t*)) void)
(define-function* cairo_pattern_set_extend ((pattern cairo-pattern-t*) (extend cairo-extend-t)) void)
(define-function* cairo_pattern_get_extend ((pattern cairo-pattern-t*)) cairo-extend-t)
(define-function* cairo_pattern_set_filter ((pattern cairo-pattern-t*) (filter cairo-filter-t)) void)
(define-function* cairo_pattern_get_filter ((pattern cairo-pattern-t*)) cairo-filter-t)
(define-function* cairo_pattern_get_rgba ((pattern cairo-pattern-t*) (red double*) (green double*) (blue double*) (alpha double*)) cairo-status-t)
(define-function* cairo_pattern_get_surface ((pattern cairo-pattern-t*) (*surface cairo-surface-t*)) cairo-status-t)
(define-function* cairo_pattern_get_color_stop_rgba ((pattern cairo-pattern-t*) (index int) (offset double*) (red double*) (green double*) (blue double*) (alpha double*)) cairo-status-t)
(define-function* cairo_pattern_get_color_stop_count ((pattern cairo-pattern-t*) (count int*)) cairo-status-t)
(define-function* cairo_pattern_get_linear_points ((pattern cairo-pattern-t*) (x0 double*) (y0 double*) (x1 double*) (y1 double*)) cairo-status-t)
(define-function* cairo_pattern_get_radial_circles ((pattern cairo-pattern-t*) (x0 double*) (y0 double*) (r0 double*) (x1 double*) (y1 double*) (r1 double*)) cairo-status-t)
(define-function* cairo_mesh_pattern_get_patch_count ((pattern cairo-pattern-t*) (count unsigned-int*)) cairo-status-t)
(define-function* cairo_mesh_pattern_get_path ((pattern cairo-pattern-t*) (patch-num unsigned-int)) cairo-path-t*)
(define-function* cairo_mesh_pattern_get_corner_color_rgba ((pattern cairo-pattern-t*) (patch-num unsigned-int) (corner-num unsigned-int) (red double*) (green double*) (blue double*) (alpha double*)) cairo-status-t)
(define-function* cairo_mesh_pattern_get_control_point ((pattern cairo-pattern-t*) (patch-num unsigned-int) (point-num unsigned-int) (x double*) (y double*)) cairo-status-t)
(define-function* cairo_matrix_init ((matrix cairo-matrix-t*) (xx double) (yx double) (xy double) (yy double) (x0 double) (y0 double)) void)
(define-function* cairo_matrix_init_identity ((matrix cairo-matrix-t*)) void)
(define-function* cairo_matrix_init_translate ((matrix cairo-matrix-t*) (tx double) (ty double)) void)
(define-function* cairo_matrix_init_scale ((matrix cairo-matrix-t*) (sx double) (sy double)) void)
(define-function* cairo_matrix_init_rotate ((matrix cairo-matrix-t*) (radians double)) void)
(define-function* cairo_matrix_translate ((matrix cairo-matrix-t*) (tx double) (ty double)) void)
(define-function* cairo_matrix_scale ((matrix cairo-matrix-t*) (sx double) (sy double)) void)
(define-function* cairo_matrix_rotate ((matrix cairo-matrix-t*) (radians double)) void)
(define-function* cairo_matrix_invert ((matrix cairo-matrix-t*)) cairo-status-t)
(define-function* cairo_matrix_multiply ((result cairo-matrix-t*) (a const-cairo-matrix-t*) (b const-cairo-matrix-t*)) void)
(define-function* cairo_matrix_transform_distance ((matrix const-cairo-matrix-t*) (dx double*) (dy double*)) void)
(define-function* cairo_matrix_transform_point ((matrix const-cairo-matrix-t*) (x double*) (y double*)) void)
(define-function* cairo_region_create () cairo-region-t*)
(define-function* cairo_region_create_rectangle ((rectangle const-cairo-rectangle-int-t*)) cairo-region-t*)
(define-function* cairo_region_create_rectangles ((rects const-cairo-rectangle-int-t*) (count int)) cairo-region-t*)
(define-function* cairo_region_copy ((original const-cairo-region-t*)) cairo-region-t*)
(define-function* cairo_region_reference ((region cairo-region-t*)) cairo-region-t*)
(define-function* cairo_region_destroy ((region cairo-region-t*)) void)
(define-function* cairo_region_equal ((a const-cairo-region-t*) (b const-cairo-region-t*)) cairo-bool-t)
(define-function* cairo_region_status ((region const-cairo-region-t*)) cairo-status-t)
(define-function* cairo_region_get_extents ((region const-cairo-region-t*) (extents cairo-rectangle-int-t*)) void)
(define-function* cairo_region_num_rectangles ((region const-cairo-region-t*)) int)
(define-function* cairo_region_get_rectangle ((region const-cairo-region-t*) (nth int) (rectangle cairo-rectangle-int-t*)) void)
(define-function* cairo_region_is_empty ((region const-cairo-region-t*)) cairo-bool-t)
(define-function* cairo_region_contains_rectangle ((region const-cairo-region-t*) (rectangle const-cairo-rectangle-int-t*)) cairo-region-overlap-t)
(define-function* cairo_region_contains_point ((region const-cairo-region-t*) (x int) (y int)) cairo-bool-t)
(define-function* cairo_region_translate ((region cairo-region-t*) (dx int) (dy int)) void)
(define-function* cairo_region_subtract ((dst cairo-region-t*) (other const-cairo-region-t*)) cairo-status-t)
(define-function* cairo_region_subtract_rectangle ((dst cairo-region-t*) (rectangle const-cairo-rectangle-int-t*)) cairo-status-t)
(define-function* cairo_region_intersect ((dst cairo-region-t*) (other const-cairo-region-t*)) cairo-status-t)
(define-function* cairo_region_intersect_rectangle ((dst cairo-region-t*) (rectangle const-cairo-rectangle-int-t*)) cairo-status-t)
(define-function* cairo_region_union ((dst cairo-region-t*) (other const-cairo-region-t*)) cairo-status-t)
(define-function* cairo_region_union_rectangle ((dst cairo-region-t*) (rectangle const-cairo-rectangle-int-t*)) cairo-status-t)
(define-function* cairo_region_xor ((dst cairo-region-t*) (other const-cairo-region-t*)) cairo-status-t)
(define-function* cairo_region_xor_rectangle ((dst cairo-region-t*) (rectangle const-cairo-rectangle-int-t*)) cairo-status-t)
(define-function* cairo_debug_reset_static_data () void)
(define-function* cairo_pdf_surface_create ((filename const-char*) (width-in-points double) (height-in-points double)) cairo-surface-t*)
(define-function* cairo_pdf_surface_create_for_stream ((write-func cairo-write-func-t) (closure void*) (width-in-points double) (height-in-points double)) cairo-surface-t*)
(define-function* cairo_pdf_surface_restrict_to_version ((surface cairo-surface-t*) (version cairo-pdf-version-t)) void)
(define-function* cairo_pdf_get_versions ((*versions cairo-pdf-version-t-const*) (num-versions int*)) void)
(define-function* cairo_pdf_version_to_string ((version cairo-pdf-version-t)) const-char*)
(define-function* cairo_pdf_surface_set_size ((surface cairo-surface-t*) (width-in-points double) (height-in-points double)) void)
